@page "/fetchdata"
@using BlazorServer.Data
@inject WeatherForecastService ForecastService

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-bordered">
        <thead>
            <tr class="table-info">
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    private static readonly string[] Summaries = new[]
    {
            "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };

    private int SummaryTemp(int temp)
    {
        return temp switch
        {
            int n when n <= -10 => 0,
            int n when n <= 0 => 1,
            int n when n <= 10 => 2,
            int n when n <= 15 => 3,
            int n when n <= 20 => 4,
            int n when n <= 25 => 5,
            int n when n <= 30 => 6,
            int n when n <= 35 => 7,
            int n when n <= 45 => 8,
            _ => 9,
        };
    }

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
        foreach (var wf in forecasts)
        {
            wf.Summary = Summaries[SummaryTemp(wf.TemperatureC)];
        };
    }
}
